as.tibble(Zoo)
summary(Zoo)
Soybean
Soybean
summary(Soybean$Class)
summary(Soybean)
# a)
Soybean %>%
gather(date:roots, key = "variable", value = "category")
View(Soybean %>%
gather(date:roots, key = "variable", value = "category"))
# a)
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>%
ggplot(aes(category)) +
geom_bar() +
facet_wrap( ~ variable)
nearZeroVar(Soybean)
names(Soybean[nearZeroVar(Soybean)])
Summary(Soybean$leaf.malf)
ummary(Soybean$leaf.malf)
summary(Soybean$leaf.malf)
summary(Soybean$leaf.malf)
45/554
summary(Soybean$leaf.mild)
20/535
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>% filter(is.na(category))
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>% filter(is.na(category)) %>% count()
dim(Soybean)
683*36
2337/24588
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>% filter(is.na(category)) %>% group_by(variable) %>% summary(n())
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>% filter(is.na(category)) %>% group_by(variable)
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>% filter(is.na(category)) %>% group_by(variable) %>% summarise(n())
sort(Soybean %>%
gather(date:roots, key = "variable", value = "category") %>% filter(is.na(category)) %>% group_by(variable) %>% summarise(n()))
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>% filter(is.na(category)) %>% group_by(variable) %>% summarise(count = n()) %>% arrange(count)
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>% filter(is.na(category)) %>% group_by(variable) %>% summarise(count = n()) %>% arrange(desc(count))
View(Soybean %>%
gather(date:roots, key = "variable", value = "category") %>%
filter(is.na(category)) %>%
group_by(variable) %>%
summarise(count = n()) %>%
arrange(desc(count)))
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>%
filter(is.na(category)) %>%
group_by(variable) %>%
summarise(count = n()) %>%
arrange(desc(count))
install.packages("mice")
mice::md.pattern(Soybean)
?mice::md.pattern
install.packages("Amelia")
Amelia::missmap(Soybean)
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>%
filter(is.na(category)) %>%
group_by(variable) %>%
summarise(count = n()) %>%
arrange(desc(count))
install.packages("mi")
mi::missing.pattern.plot(Soybean)
mi::missing_data.frame()
mi::missing_data.frame(Soybean)
mi::missing_variable(Soybean)
ggplot_missing <- function(x){
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2,
y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_grey(name = "",
labels = c("Present","Missing")) +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Rows / observations")
}
ggplot_missing(Soybean)
??melt
library(reshape)
ggplot_missing <- function(x){
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2,
y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_grey(name = "",
labels = c("Present","Missing")) +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Rows / observations")
}
ggplot_missing(Soybean)
mi::missing_variable(Soybean)
Amelia::missmap(Soybean)
Soybean %>%
count(Class)
Soybean %>%
count(Class) %>%
arrange(n)
Soybean %>%
count(Class) %>%
arrange(desc(n))
Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n))
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
left_joint(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "n")
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
dplyr::left_joint(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "n")
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
dplyr::left_joint(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "n")
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
left_join(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "n")
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
left_join(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "Class")
Soybean %>%
count(n_before = Class) %>%
arrange(desc(n)) %>%
left_join(Soybean %>%
na.omit() %>%
count(n_after = Class) %>%
arrange(desc(n)), by = "Class")
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
left_join(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "Class")
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
left_join(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "Class") %>%
mutate(n_diff = n.x - n.y)
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
left_join(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "Class") %>%
mutate(n_diff = n.x - n.y)
Amelia::missmap(Soybean %>% filter(Class = "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == ""))
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "2-4-d-injury"))
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight"))
Amelia::missmap(Soybean %>% filter(Class == "cyst-nematode"))
Amelia::missmap(Soybean %>% filter(Class == "herbicide-injury"))
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "2-4-d-injury"))
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight"))
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight"))
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight"))
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "cyst-nematode"))
Amelia::missmap(Soybean %>% filter(Class == "herbicide-injury"))
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight"))
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "herbicide-injury"))
Amelia::missmap(Soybean %>% filter(Class == "cyst-nematode"))
Amelia::missmap(Soybean %>% filter(Class == "2-4-d-injury"))
Amelia::missmap(Soybean)
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>%
filter(is.na(category)) %>%
group_by(variable) %>%
summarise(count = n()) %>%
arrange(desc(count))
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight"))
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "herbicide-injury"))
Soybean %>% filter(Class != "diaporthe-pod-&-stem-blight",
Class != "phytophthora-rot",
Class != "herbicide-injury",
Class != "cyst-nematode",
Class != "2-4-d-injury")
Soybean %>% filter(Class != "diaporthe-pod-&-stem-blight",
Class != "phytophthora-rot",
Class != "herbicide-injury",
Class != "cyst-nematode",
Class != "2-4-d-injury") %>%
Amelia::missmap()
Soybean %>% filter(Class != "diaporthe-pod-&-stem-blight",
Class != "herbicide-injury",
Class != "cyst-nematode",
Class != "2-4-d-injury") %>%
Amelia::missmap()
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight"))
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
left_join(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "Class") %>%
mutate(n_diff = n.x - n.y)
Amelia::missmap(Soybean)
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight", Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight", Class == "phytophthora-rot"))
Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight", Class == "phytophthora-rot")
Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight" | Class == "phytophthora-rot")
Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight" | Class == "phytophthora-rot") %>% Amelia::missmap()
Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight") %>% Amelia::missmap()
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>%
filter(is.na(category)) %>%
group_by(variable) %>%
summarise(count = n()) %>%
arrange(desc(count))
names(Soybean[nearZeroVar(Soybean)])
Amelia::missmap(Soybean)
Soybean %>% preProcess(method = "nzv")
Soybean %>% preProcess(method = "nzv") %>% predict(Soybean)
dim(Soybean)
as.data.frame(Soybean) %>% preProcess(method = "nzv") %>% predict(Soybean)
preProcess(Soybean, method = "nzv")
nearZeroVar(Soybean)
?preProcess
?nearZeroVar
?preProcess
Soybean %>% filter(Class != "diaporthe-pod-&-stem-blight",
Class != "herbicide-injury",
Class != "cyst-nematode",
Class != "2-4-d-injury") %>%
Amelia::missmap()
Soybean %>%
count(Class) %>%
arrange(desc(n)) %>%
left_join(Soybean %>%
na.omit() %>%
count(Class) %>%
arrange(desc(n)), by = "Class") %>%
mutate(n_diff = n.x - n.y)
Soybean %>% filter(Class == "phytophthora-rot") %>% Amelia::missmap()
Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight") %>% Amelia::missmap()
Amelia::missmap(Soybean %>% filter(Class == "phytophthora-rot"))
Amelia::missmap(Soybean %>% filter(Class == "herbicide-injury"))
Amelia::missmap(Soybean %>% filter(Class == "cyst-nematode"))
Amelia::missmap(Soybean %>% filter(Class == "2-4-d-injury"))
Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight") %>% Amelia::missmap()
Soybean %>% filter(Class == "herbicide-injury") %>% Amelia::missmap()
Soybean %>% filter(Class == "cyst-nematode") %>% Amelia::missmap()
Soybean %>% filter(Class == "2-4-d-injury") %>% Amelia::missmap()
Soybean %>% filter(Class != "diaporthe-pod-&-stem-blight",
Class != "herbicide-injury",
Class != "cyst-nematode",
Class != "2-4-d-injury") %>%
Amelia::missmap()
Soybean %>% filter(Class == "phytophthora-rot") %>% Amelia::missmap()
Soybean %>% filter(Class != "diaporthe-pod-&-stem-blight",
Class != "herbicide-injury",
Class != "cyst-nematode",
Class != "2-4-d-injury") %>%
Amelia::missmap()
SoybeanSub <- Soybean %>% filter(Class != "diaporthe-pod-&-stem-blight",
Class != "herbicide-injury",
Class != "cyst-nematode",
Class != "2-4-d-injury")
SoybeanSub %>%
Amelia::missmap()
SoybeanSub %>%
preProcess(method = "nzv")
SoybeanSub %>%
preProcess(method = "knnImpute")
SoybeanSub %>%
preProcess(method = "bagImpute")
preProcess(SoybeanSub, method = "bagImpute")
predict(preProcess(SoybeanSub, method = "bagImpute"), SoybeanSub)
dim(predict(preProcess(SoybeanSub, method = "bagImpute"), SoybeanSub))
dim(Soybean)
dim(SoybeanSub)
dim(predict(preProcess(SoybeanSub %>% select(-Class), method = "bagImpute"), SoybeanSub %>% select(-Class)))
# a)
Soybean %>%
gather(date:roots, key = "variable", value = "category") %>%
ggplot(aes(category)) +
geom_bar() +
facet_wrap( ~ variable)
Soybean %>% filter(Class == "diaporthe-pod-&-stem-blight") %>% Amelia::missmap()
?BloodBrain
# 3.3
data(BloodBrain)
BloodBrain
data(BloodBrain)
BloodBrain
data("BloodBrain")
BloodBrain
# 3.3
library(caret)
data("BloodBrain")
BloodBrain
bbbDescr
bbbDescr <- as.tibble(bbbDescr)
bbbDescr
logBBB
class(logBBB)
logBBB %>% as.tibble()
logBBB %>% as.tibble() %>% ggplot(aes(value)) + geom_histogram()
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram()
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 1)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.5)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.2)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.1)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.05)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.02)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.01)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.05)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.1)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.2)
logBBB %>% as.tibble() %>%
ggplot(aes(value)) + geom_histogram(binwidth = 0.25)
skewness(logBBB)
nearZeroVar(bbbDescr)
names(bbbDescr[nearZeroVar(bbbDescr)])
bbbDescr
summary(bbbDescr)
bbbDescr[,nearZeroVar(bbbDescr)]
summary(bbbDescr[,nearZeroVar(bbbDescr)])
names(bbbDescr[nearZeroVar(bbbDescr)])
bbbDescr %>% select(names(bbbDescr[nearZeroVar(bbbDescr)]))
bbbDescr %>% select(names(bbbDescr[nearZeroVar(bbbDescr)])) %>% gather(negative:alert, key = "variable", value = "value") %>% ggplot(aes(value)) + geom_histogram()
bbbDescr %>% select(names(bbbDescr[nearZeroVar(bbbDescr)])) %>% gather(negative:alert, key = "variable", value = "value") %>% ggplot(aes(value)) + geom_histogram() + facet_wrap( ~ variable)
bbbDescr %>%
select(names(bbbDescr[nearZeroVar(bbbDescr)])) %>%
gather(negative:alert, key = "variable", value = "value") %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap( ~ variable)
summary(bbbDescr$negative)
summary(as.factor(bbbDescr$negative))
corrplot::corrplot(bbbDescr, method = "hclust")
corrplot::corrplot(bbbDescr, , order = "hclust")
corrplot::corrplot(bbbDescr, order = "hclust")
map(bbbDescr, typeof)
corrplot::corrplot(cor(bbbDescr), order = "hclust")
preProcess(bbbDescr, method = c("nzv", "corr")
preProcess(bbbDescr, method = c("nzv", "corr"))
preProcess(bbbDescr, method = c("corr"))
nearZeroVar(bbbDescr)
preProcess(bbbDescr, method = c("nzv", "corr"))
predict(preProcess(bbbDescr, method = c("nzv", "corr")), bbbDescr)
bbbDescr
bbbDescrSub <- predict(preProcess(bbbDescr, method = c("nzv", "corr")), bbbDescr)
bbbDescrSub
preProcess(bbbDescr, method = c("nzv", "corr"))
aa <- preProcess(bbbDescr, method = c("nzv", "corr"))
aa
attributes(aa)
aa$names
aa$names[1]
aa[1]
aa[2]
aa[]
corrplot::corrplot(cor(bbbDescrSub), order = "hclust")
bbbDescrSub <- predict(preProcess(bbbDescr, method = c("spatialSign","nzv", "corr")), bbbDescr)
bbbDescrSub
corrplot::corrplot(cor(bbbDescrSub), order = "hclust")
Amelia::missmap(bbbDescrSub)
map_dbl(bbbDescrSub, skewness)
sort(map_dbl(bbbDescrSub, skewness))
histogram(bbbDescrSub$tcpa)
histogram(bbbDescrSub$tcpa,20)
histogram(bbbDescrSub$tcpa,bins = 20)
histogram(bbbDescrSub$tcpa,bins = 40)
histogram(bbbDescrSub$tcpa,bins = 90)
histogram(bbbDescrSub$tcpa, 90)
hist(bbbDescrSub$tcpa, 20)
hist(bbbDescrSub$tcpa, 40)
hist(bbbDescrSub$tcpa, 90)
2018-1962
56/15
data(twoClassData)
library(AppliedPredictiveModeling)
data(twoClassData)
predictors
classe
classes
str(predictors)
str(classes)
set.seed(1)
library(caret)
trainingRows <- createDataPartition(classes, p = 0.8, list = FALSE)
head(trainingRows)
set.seed(1)
trainingRows <- createDataPartition(classes, p = 0.8, list = FALSE)
head(trainingRows)
trainingRows <- createDataPartition(classes, p = 0.8, list = T)
head(trainingRows)
trainingRows
str(trainingRows)
set.seed(1)
trainingRows <- createDataPartition(classes, p = 0.8, list = T)
str(trainingRows)
set.seed(1)
trainingRows <- createDataPartition(classes, p = 0.8, list = T)
dim(classes)
length(classes)
set.seed(1)
trainingRows <- createDataPartition(classes, p = 0.8, list = T)
trainingRows
classes[trainingRows]
trainingRows <- createDataPartition(classes, p = 0.8, list = FALSE)
classes[trainingRows]
summary(classes[trainingRows])
summary(classes)
111/97
89/78
trainPredictors <- predictors %>% slice(trainingRows)
library(tidyverse)
trainPredictors <- predictors %>%
slice(trainingRows)
trainPredictors
trainClasses <- classes %>%
slice(trainingRows)
classes[trainingRows]
summary(trainClasses)
trainClasses <- classes[trainingRows]
summary(trainClasses)
testPredictors <- predictors %>%
slice(-trainingRows)
testPredictors
testClasses <- classes[-trainingRows]
summary(testClasses)
22/19
23/18
21/20
# Resampling
set.seed(1)
repeatedSplits <- createDataPartition(trainClasses, p = .80,
times = 3)
repeatedSplits
str(repeatedSplits)
# Resampling
set.seed(1)
repeatedSplits <- createDataPartition(trainClasses, p = .80,
times = 3)
str(repeatedSplits)
set.seed(1)
cvSplits <- createFolds(trainClasses, k = 10,
returnTrain = T)
cvSplits
str(cvSplits)
cvSplits$Fold01
cvSplits$Fold02
fold1 <- cvSplits[[1]]
fold1
plot(fold1)
length(fold1)
cvPredictors1 <- trainPredictors %>% slice(fold1)
cvClasses1 <- trainClasses[fold1]
nrow(trainPredictors)
nrow(cvPredictors1)
151/167
