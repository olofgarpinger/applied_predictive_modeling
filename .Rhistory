GermanCredit$CheckingAccountStatus.lt.0 <- NULL
GermanCredit$SavingsAccountBonds.lt.100 <- NULL
GermanCredit$EmploymentDuration.lt.1 <- NULL
GermanCredit$EmploymentDuration.Unemployed <- NULL
GermanCredit$Personal.Male.Married.Widowed <- NULL
GermanCredit$Property.Unknown <- NULL
GermanCredit$Housing.ForFree <- NULL
## Split the data into training (80%) and test sets (20%)
set.seed(100)
inTrain <- createDataPartition(GermanCredit$Class, p = .8)[[1]]
GermanCreditTrain <- GermanCredit[ inTrain, ]
GermanCreditTest  <- GermanCredit[-inTrain, ]
set.seed(1056)
svmFit <- train(Class ~ ., data = GermanCreditTrain,
method = "svmRadial")
set.seed(1056)
svmFit <- train(Class ~ ., data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"))
set.seed(1056)
svmFit <- train(Class ~ ., data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneLength = 10)
set.seed(1056)
svmFit <- train(Class ~ ., data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "repeatedcv",
repeats = 5,
classProbs = TRUE))
svmFit
library(AppliedPredictiveModeling)
library(tidyverse)
library(caret)
library(caret)
data(GermanCredit)
GermanCredit <- GermanCredit[, -nearZeroVar(GermanCredit)]
GermanCredit$CheckingAccountStatus.lt.0 <- NULL
GermanCredit$SavingsAccountBonds.lt.100 <- NULL
GermanCredit$EmploymentDuration.lt.1 <- NULL
GermanCredit$EmploymentDuration.Unemployed <- NULL
GermanCredit$Personal.Male.Married.Widowed <- NULL
GermanCredit$Property.Unknown <- NULL
GermanCredit$Housing.ForFree <- NULL
set.seed(100)
inTrain <- createDataPartition(GermanCredit$Class, p = .8)[[1]]
GermanCreditTrain <- GermanCredit[ inTrain, ]
GermanCreditTest  <- GermanCredit[-inTrain, ]
svmFit <- train(Class ~ ., data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "repeatedcv",
repeats = 5,
classProbs = TRUE))
svmFit
dim(GermanCredit)
plot(svmFit, scales(list(x = list(log = 2))))
plot(svmFit, scales = list(x = list(log = 2)))
svmFit$method
svmFit$modelType
svmFit$modelInfo
svmFit$results
plot(svmFit)
plot(svmFit, scales = list(x = list(log = 2)))
predictedClasses <- predict(svmFit, GermanCreditTest)
str(predictedClasses)
GermanCreditTest
table(GermanCreditTest$Class, predictedClasses)
(36+12)/(36+24+12+128)
1-(36+12)/(36+24+12+128)
1-(36+12)/(36+24+12+128+1)
1-(36+12)/(36+24+12+128)
svmFit
0.762-0.34988
svmFit$results
0.762-0.04381082
svmFit$bestTune
predictedProbs <- predict(svmFit, newdata = GermanCreditTest, type = "prob")
predictedProbs
predictedClasses
predictedPor
predictedProbs %>% as.tibble() %>% mutate(predictedClasses = predictedClasses)
predictedProbs %>% as.tibble() %>% mutate(predictedClasses = predictedClasses) %>% View()
predictedProbs %>% as.tibble() %>% mutate(predictedClasses = predictedClasses) %>% ggplot(aes(Bad, Good)) + geom_point(aes(color = predictedClasses))
predictedProbs %>% as.tibble() %>% mutate(predictedClasses = GermanCreditTest$Class) %>% ggplot(aes(Bad, Good)) + geom_point(aes(color = predictedClasses))
predictedProbs %>% as.tibble() %>% mutate(predictedClasses = GermanCreditTest$Class) %>% ggplot(aes(Bad, Good)) + geom_point(aes(color = predictedClasses, size = predictedClasses))
head(predictedProbs)
# Between-model comparisons
set.seed(1056)
logisticReg <- train(Class ~ .,
data = GermanCreditTrain,
method = "glm",
trControl = trainControl(method = "repeatedcv",
repeats = 5))
logisticReg
resamp <- resamples(list(SVM = svmFit, Logistic = logisticReg))
?resamples
summary(resamp)
modelDifferences <- diff(resamp)
summary(modelDifferences)
(369*5+163*4+38*3+7*2+4*1)/581
15+31+31+30+27+32
456000/12
42000*12
library(AppliedPredictiveModeling)
library(tidyverse)
library(caret)
# Data splitting
data(twoClassData)
str(predictors)
str(classes)
set.seed(1)
trainingRows <- createDataPartition(classes, p = 0.8, list = FALSE)
head(trainingRows)
trainingRows
trainPredictors <- predictors %>%
slice(trainingRows)
trainPredictors
trainClasses <- classes[trainingRows]
summary(trainClasses)
testPredictors <- predictors %>%
slice(-trainingRows)
testPredictors
testClasses <- classes[-trainingRows]
summary(testClasses)
# Resampling
set.seed(1)
repeatedSplits <- createDataPartition(trainClasses, p = .80,
times = 3)
str(repeatedSplits)
# Resampling
set.seed(1)
repeatedSplits <- createDataPartition(trainClasses, p = .80,
times = 3)
str(repeatedSplits)
set.seed(1)
repeatedSplits <- createFolds(trainClasses, k = 10, returnTrain = T)
str(repeatedSplits)
repeatedSplits <- createFolds(trainClasses, k = 3, returnTrain = T)
str(repeatedSplits)
repeatedSplits <- createDataPartition(trainClasses, p = .80,
times = 3)
str(repeatedSplits)
set.seed(1)
cvSplits <- createFolds(trainClasses, k = 10,
returnTrain = T)
str(cvSplits)
fold1 <- cvSplits[[1]]
fold1
cvPredictors1 <- trainPredictors %>% slice(fold1)
cvClasses1 <- trainClasses[fold1]
nrow(trainPredictors)
nrow(cvPredictors1)
# Basic Model Building in R
trainPredictors <- as.matrix(trainPredictors)
knnFit <- knn3(x = trainPredictors, y = trainClasses, k = 5)
knnFit
testPredictions <- predict(knnFit, newdata = testPredictors,
type = "class")
head(testPredictions)
str(testPredictions)
table(testPredictions, testClasses)
# Determination of tuning parameters
library(caret)
data(GermanCredit)
dim(GermanCredit)
GermanCredit <- GermanCredit[, -nearZeroVar(GermanCredit)]
nearZeroVar(GermanCredit)
data(GermanCredit)
nearZeroVar(GermanCredit)
GermanCredit <- GermanCredit[, -nearZeroVar(GermanCredit)]
GermanCredit$CheckingAccountStatus.lt.0
summary(GermanCredit$CheckingAccountStatus.lt.0)
summary(as.factor(GermanCredit$CheckingAccountStatus.lt.0))
GermanCredit$CheckingAccountStatus
data(GermanCredit)
dim(GermanCredit)
GermanCredit <- GermanCredit[, -nearZeroVar(GermanCredit)]
GermanCredit$CheckingAccountStatus.lt.0 <- NULL
GermanCredit$SavingsAccountBonds.lt.100 <- NULL
GermanCredit$EmploymentDuration.lt.1 <- NULL
GermanCredit$EmploymentDuration.Unemployed <- NULL
GermanCredit$Personal.Male.Married.Widowed <- NULL
GermanCredit$Property.Unknown <- NULL
GermanCredit$Housing.ForFree <- NULL
## Split the data into training (80%) and test sets (20%)
set.seed(100)
inTrain <- createDataPartition(GermanCredit$Class, p = .8)[[1]]
GermanCreditTrain <- GermanCredit[ inTrain, ]
GermanCreditTest  <- GermanCredit[-inTrain, ]
set.seed(1056)
svmFit <- train(Class ~ ., data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "repeatedcv",
repeats = 5,
classProbs = TRUE))
svmFit
?trainControl
svmFit2 <- train(Class ~ ., data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "repeatedcv",
number = 10, repeats = 1,
classProbs = TRUE))
svmFit2
plot(svmFit, scales = list(x = list(log = 2)))
lines(svmFit2, scales = list(x = list(log = 2)), col = "red")
plot(svmFit2, scales = list(x = list(log = 2)), add = T)
plot(svmFit, scales = list(x = list(log = 2)))
predictedClasses <- predict(svmFit, GermanCreditTest)
str(predictedClasses)
predictedProbs <- predict(svmFit, newdata = GermanCreditTest, type = "prob")
head(predictedProbs)
# Between-model comparisons
set.seed(1056)
logisticReg <- train(Class ~ .,
data = GermanCreditTrain,
method = "glm",
trControl = trainControl(method = "repeatedcv",
repeats = 5))
logisticReg
resamp <- resamples(list(SVM = svmFit, Logistic = logisticReg))
?resamples
summary(resamp)
# Determination of tuning parameters
library(caret)
data(GermanCredit)
dim(GermanCredit)
GermanCredit <- GermanCredit[, -nearZeroVar(GermanCredit)]
GermanCredit$CheckingAccountStatus.lt.0 <- NULL
GermanCredit$SavingsAccountBonds.lt.100 <- NULL
GermanCredit$EmploymentDuration.lt.1 <- NULL
GermanCredit$EmploymentDuration.Unemployed <- NULL
GermanCredit$Property.Unknown <- NULL
GermanCredit$Housing.ForFree <- NULL
## Split the data into training (80%) and test sets (20%)
set.seed(100)
GermanCredit$Personal.Male.Married.Widowed <- NULL
inTrain <- createDataPartition(GermanCredit$Class, p = .8)[[1]]
GermanCreditTrain <- GermanCredit[ inTrain, ]
GermanCreditTest  <- GermanCredit[-inTrain, ]
set.seed(1056)
svmFit <- train(Class ~ ., data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "repeatedcv",
repeats = 5,
classProbs = TRUE))
plot(svmFit, scales = list(x = list(log = 2)))
predictedClasses <- predict(svmFit, GermanCreditTest)
str(predictedClasses)
predictedProbs <- predict(svmFit, newdata = GermanCreditTest, type = "prob")
head(predictedProbs)
# Between-model comparisons
set.seed(1056)
logisticReg <- train(Class ~ .,
data = GermanCreditTrain,
method = "glm",
trControl = trainControl(method = "repeatedcv",
repeats = 5))
logisticReg
resamp <- resamples(list(SVM = svmFit, Logistic = logisticReg))
?resamples
summary(resamp)
modelDifferences <- diff(resamp)
summary(modelDifferences)
library(AppliedPredictiveModeling)
library(caret)
?createDataPartition
# Data splitting
data(twoClassData)
set.seed(1)
trainingRows <- createDataPartition(classes, k = 10, returnTrain = T)
trainingRows <- createFolds(classes, k = 10, returnTrain = T)
trainingRows
trainingRows <- createDataPartition(classes, p = 0.8, returnTrain = T)
# Exercise 4.2
data("permeability")
?permeability
permeability
View(permeability)
fingerprints
View(fingerprints)
dim(fingerprints)
library(tidyverse)
fingerprints = as.tibble(fingerprints)
fingerprints
nearZeroVar(fingerprints)
dim(fingerprints)
permeability
hist(permeability)
dim(fingerprints)
repeatedCV <- createDataPartition(permeability, k = 10, times = 25)
repeatedCV <- createFolds(permeability, k = 10, times = 25)
repeatedCV <- createMultiFolds(permeability, k = 10, times = 25)
repeatedCV
str(repeatedCV)
createDataPartition()
?createDataPartition
library(AppliedPredictiveModeling)
library(caret)
library(tidyverse)
?train
# Exercise 4.3
data("ChemicalManufacturingProcess")
View(ChemicalManufacturingProcess)
nearZeroVar(ChemicalManufacturingProcess)
0.545-0.0308
# (b)
0.545*0.9
library(AppliedPredictiveModeling)
library(caret)
library(tidyverse)
# Exercise 4.4
data(oil)
oilType
fattyAcids
table(oilType)
prop.table(table(oilType))
prop.table(table(oilType))*100
# (a)
sample(oilType, 60)
# (a)
prop.table(table(sample(oilType, 60)))
# (a)
prop.table(table(sample(oilType, 60)))*100
prop.table(table(oilType))*100
# (a)
prop.table(table(sample(oilType, 60)))*100
prop.table(table(oilType))*100
# (a)
prop.table(table(sample(oilType, 60)))*100
oilType
?createDataPartition
length(oilType)
60/96
# (b)
createDataPartition(oilType, p = 0.625, list = F)
# (b)
oilType %>%
slice(createDataPartition(oilType, p = 0.625, list = F))
oilType
# (b)
oilType %>% as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F))
# (b)
oilType %>% as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F))
# (b)
oilType %>%
as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F))
# (b)
oilType %>%
as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F)) %>%
table() %>%
prop.table()
# (b)
oilType %>%
as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F)) %>%
table() %>%
prop.table()*100
# (b)
oilType %>%
as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F)) %>%
table() %>%
prop.table()*100
# (b)
oilType %>%
as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F)) %>%
table() %>%
prop.table()*100
# (b)
oilType %>%
as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F)) %>%
table() %>%
prop.table()*100
# (b)
prop.table(table(oilType))*100
oilType %>%
as.tibble() %>%
slice(createDataPartition(oilType, p = 0.625, list = F)) %>%
table() %>%
prop.table()*100
createDataPartition(oilType, p = 0.625, list = F)
AA <- createDataPartition(oilType, p = 0.625, list = F)
BB <- createDataPartition(oilType, p = 0.625, list = F)
CC <- createDataPartition(oilType, p = 0.625, list = F)
DD <-
createDataPartition(oilType, p = 0.625, list = F)
AA
plot(AA)
points(BB, col = "red", pch = 20)
points(CC, col = "green", pch = 4)
points(DD, col = "blue", pch = 2)
?maxDissim
observed <- c(.22, .83, -.12, .89, -.23, -1.3, -0.15, -1.4, .62, .99,
-.18, .32, .34, -.30, .04, -.87, .55, -1.3, -1.15, .20)
predicted <- c(.24, .78, -.66, .53, .7, -.75, -.41, -.43, .49, .79,
-1.19, .06, .75, -.07, .43, -.42, -.25, -.64, -1.26, -.07)
lentgh(observed)
length(predicted)
lenght(observed)
length(observed)
length(predicted)
library(caret)
residualValues <- observed - predicted
summary(residualValues)
plot(observed, predicted)
abline(0, 1, col = "darkgrey", lty = 2)
plot(predicted, residualValues, ylab = "residual")
abline(h = 0, col = "darkgrey", lty = 2)
R2(predicted, observed)
RMSE(predicted, observed)
cor(predicted, observed)
cor(predicted, observed)^2
cor(predicted, observed, method = "spearman")
data(solubility)
library(AppliedPredictiveModeling)
data(solubility)
View(solTrainX)
View(solTrainX)
solTrainY
View(solTrainXtrans)
trainingData <- solTrainXtrans
library(tidyverse)
trainingData <- as.tibble(solTrainXtrans)
trainingData
trainingData <- as.tibble(solTrainXtrans) %>%
mutate(Solubility = solTrainY)
trainingData
lmFitAllPredictors <- lm(Solubility ~ ., data = trainingData)
summary(lmFitAllPredictors)
lmPred1 <- predict(lmFitAllPredictors, solTestXtrans)
lmPred1
lmValues <- tibble(obs = solTestY, pred = lmPred1)
lmValues
library(caret)
defaultSummary(lmValues)
defaultSummary(lmValues1)
lmValues1 <- data.frame(obs = solTestY, pred = lmPred1)
defaultSummary(lmValues1)
rlmFitAllPredictors <- rlm(Solubility ~ ., data = trainingData)
library(MASS)
rlmFitAllPredictors <- rlm(Solubility ~ ., data = trainingData)
summary(rlmFitAllPredictors)
ctrl <- trainControl(method = "cv", number = 10)
set.seed(100)
lmFit1 <- train(x = solTrainXtrans, y = solTrainY, method = "lm", trControl = ctrl)
lmFit1
?xyplot
xyplot(solTrainY ~ predict(lmFit1),
type = c("p", "g"),
xlab = "Predicted", ylab = "Observed")
abline(0,1)
?abline
abline(0, 1)
xyplot(solTrainY ~ predict(lmFit1),
type = c("p", "g"),
xlab = "Predicted", ylab = "Observed")
xyplot(resid(lmFit1) ~ predict(lmFit1),
type = c("p", "g"),
xlab = "Predicted", ylab = "Residuals")
resid(lmFit1)
predict(lmFit1)
corThresh <- .9
tooHigh <- findCorrelation(cor(solTrainXtrans), corThresh)
tooHigh
corrPred <- names(solTrainXtrans)[tooHigh]
trainXfiltered <- solTrainXtrans[, -tooHigh]
testXfiltered <- solTestXtrans[, -tooHigh]
set.seed(100)
lmFiltered <- train(testXfiltered, solTrainY, method = "lm",
trControl = ctrl)
corThresh <- .9
tooHigh <- findCorrelation(cor(solTrainXtrans), corThresh)
corrPred <- names(solTrainXtrans)[tooHigh]
trainXfiltered <- solTrainXtrans[, -tooHigh]
testXfiltered <- solTestXtrans[, -tooHigh]
set.seed(100)
lmFiltered <- train(testXfiltered, solTrainY, method = "lm",
trControl = ctrl)
solTrainXtrans
lmFiltered <- train(testXfiltered, solTrainY, method = "lm",
trControl = ctrl)
typeof(solTrainY)
class(solTrainY)
solTrainY
lmFiltered <- train(x = testXfiltered, y = solTrainY, method = "lm",
trControl = ctrl)
lmFiltered <- train(x = trainXfiltered, y = solTrainY, method = "lm",
trControl = ctrl)
lmFiltered
set.seed(100)
lmFiltered <- train(x = trainXfiltered, y = solTrainY, method = "lm",
trControl = ctrl)
lmFiltered
set.seed(100)
rlmPCA <- train(solTrainXtrans, solTrainY, method = "rlm", preProcess = "pca", trControl = ctrl)
rlmPCA
